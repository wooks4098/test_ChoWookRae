광원 설정을 위한 D3DLIGHT9  구조체
 typedef struct _D3DLIGHT9 {
       D3DLIGHTTYPE Type;             // 라이트 타입 3가지 라이트 타입이 가능
       D3DCOLORVALUE Diffuse;         // 확산광을 표현하는 D3DCOLORVALUE
       D3DCOLORVALUE Specular;       // 반사광을 표현하는 D3DCOLORVALUE
       D3DCOLORVALUE Ambient;        // 주변광을 표현하는 D3DCOLORVALUE
       D3DVECTOR Position;   // 라이트 객체의 위치 (방향성 라이트에서는 무시)
        D3DVECTOR Direction;             // 광선의 방향 (POINT 라이트에서는 무시)
       float Range;                       // 조명을 받는 객체의 가장 먼 거리
         float Falloff;                        // SPOTLIGHT의 내/외부 콘 사이의 강도 차이
         float Attenuation0;                  // 거리에 따른 선형 감쇠값
         float Attenuation1;                  // 거리에 따른 선형 감쇠값
         float Attenuation2;                  // 거리에 따른 2차 감쇠값
         float Theta;                        // SPOT 라이트의 내부 콘의 각도
         float Phi;                          // SPOT 라이트의 외부 콘의 각도
     } D3DLIGHT9; 

•점 광원(Point Light) 설정 
   D3DLIGHT9 light;                 // Direct3D 9 조명 구조체 변수 선언
     ZeroMemory(&light, sizeof(D3DLIGHT9));
     light.Type = D3DLIGHT_POINT;    // 조명의 타입은 포인트 라이트로 설증
     light.Diffuse.r = 1.0f;               // 조명의 Red 색 설정
     light.Diffuse.g = 1.0f;              // 조명의 Green 색 설정
     light.Diffuse.b = 1.0f;              // 조명의 Blue 색 설정
    light.Attenuation0 = 0.000000001f;  // 광원으로부터 멀어질 때의 감쇄값 
     light.Range = 5000000.0f;         //  조명이 미치는 범위
     light.Position.X = -2.0;            // 조명의 위치하는 x 좌표
     light.Position.Y = 0.0;             // 조명이 위치하는 y 좌표
     light.Position.Z = 0.0;             // 조명이 위치하는 z 좌표
    g_pd3dDevice->SetLight(1, &light);     // 라이트 번호 지정 (여기에서는 1번)
     g_pd3dDevice->LightEnable(1, TRUE); // 1번 라이트 켜기
     // 라이트 사용 기능을 TRUE로 함. (이 기능을 끄면 모든 라이트 사용은 중지됨)
     g_pd3dDevice->SetRenderState( D3DRS_LIGHTING, TRUE );
     // 최종적으로 엠비언트 라이트 켜기 (환경광의 양을 결정)
     g_pd3dDevice->SetRenderState( D3DRS_AMBIENT, 0x00202020 ); 
﻿ 

방향성 광원(Directional Light) 설정
    D3DLIGHT9 light;                       // Direct3D 9 조명 구조체 변수 선언
      ZeroMemory( &light, sizeof(D3DLIGHT9 );
      light.Type = D3DLIGHT_DIRECTIONAL;   // 조명 타입을 디렉셔널로 설정
      light.Diffuse.r = 1.0f;                     // 조명의 Red 색 설정
      light.Diffuse.g = 1.0f;                     // 조명의 Green 색 설정
      light.Diffuse.b = 1.0f;                     // 조명의 Blue 색 설정
      D3DXVECTOR3 vecDir;                  // 방향 벡터 변수 선언
      vecDir = D3DXVECTOR3(10, -2, 30);     //  조명의 방향 (진행하는 방향)
      D3DXVec3Normalize( (D3DXVECTOR3*)&light.Direction, &vecDir ); // 벡터 정규화
     g_pd3dDevice->SetLight( 0, &light );      // 라이트 번호 지정 (여기에서는 0번)
      g_pd3dDevice->LightEnable( 0, TRUE );  // 0번 라이트 켜기
      // 라이트 사용 기능을 TRUE로 함. (이 기능을 끄면 모든 라이트 사용은 중지됨)
      g_pd3dDevice->SetRenderState( D3DRS_LIGHTING, TRUE );
      // 최종적으로 엠비언트 라이트 켜기 (환경광의 양을 결정)
     g_pd3dDevice->SetRenderState( D3DRS_AMBIENT, 0x00202020 );


•점적 광원(Spot Light) 
    D3DLIGHT9 light;                        // Direct3D 9 조명 구조체 변수 선언
      ZeroMemory(&light, sizeof(D3DLIGHT9));
      light.Type = D3DLIGHT_SPOT;        // 조명의 종류는 스포트라이트로 설정
      light.Diffuse.r = 1.0;                  // 조명의 Red 색 설정
      light.Diffuse.g = 0.0;                  // 조명의 Green 색 설정
      light.Diffuse.b = 0.0;                  // 조명의 Blue 색 설정
      light.Attenuation0 = 0.0000001f;       // 감쇄값 0 설정
      light.Attenuation1 = 0.0000001f;       // 감쇄값 1 설정
      light.Attenuation2 = 0.0000001f;       // 감쇄값 2 설정
      light.Range = 500000.0f;             // 조명이 미치는 범위 설정
    light.Position.X = 30;                 // 조명의 위치하는 x 좌표
      light.Position.Y= 50;                 // 조명의 위치하는 y 좌표
      light.Position.Z = -50;                 // 조명의 위치하는 z 좌표
      light.FallOff = 1.0f;                 // 조명의 외부원주에서 내부원주 간의 빛 감쇄율
      light.Theta = D3DX_PI / 4.0;        // 조명의 내부 각
      light.Phi = D3DX_PI / 2.0;          // 조명의 외부 각
      D3DXVECTOR3 vecDir;               // 방향 벡터 변수 선언
      vecDir = D3DVECTOR3(-10, -50, 50);  // 조명의 진행 방향 설정
      D3DXVec3Normalize((D3DXVECTOR3 *) &light.Direction, &vecDir);  // 벡터 정규화
    g_pd3dDevice->SetLight(2, &light);       // 라이트 번호를 2번으로 설정
      g_pd3dDevice->LightEnable(2, TRUE);   // 2번 라이트 켜기
      // 라이트 사용 기능을 TRUE로 함. (이 기능을 끄면 모든 라이트 사용은 중지됨)
      g_pd3dDevice->SetRenderState(D3DRS_LIGHTING, TRUE);
      // 최종적으로 엠비언트 라이트 켜기 (환경광의 양을 결정)
      g_pd3dDevice->SetRenderState(D3DRS_AMBIENT, 0x00040404);


SetupLight()함수
VOID SetupLight()
{
      D3DLIGHT9 light;                         // Direct3D 9 조명 구조체 변수 선언
      ZeroMemory( &light, sizeof(D3DLIGHT9));
      light.Type = D3DLIGHT_DIRECTIONAL;       // 조명 타입을 디렉셔널로 설정
      light.Diffuse.r = 1.0f;                  // 조명의 Red 색 설정
      light.Diffuse.g = 1.0f;                  // 조명의 Green 색 설정
      light.Diffuse.b = 1.0f;                  // 조명의 Blue 색 설정
      D3DXVECTOR3 vecDir;                      // 방향 벡터 변수 선언
      vecDir = D3DXVECTOR3(10, -10, 10);       //  조명의 방향 (진행하는 방향)
      D3DXVec3Normalize( (D3DXVECTOR3*)&light.Direction, &vecDir ); // 벡터 정규화
      g_pd3dDevice->SetLight( 0, &light );      // 라이트 번호 지정 (여기에서는 0번)
      g_pd3dDevice->LightEnable( 0, TRUE );     // 0번 라이트 켜기
      // 라이트 사용 기능을 TRUE로 함. (이 기능을 끄면 모든 라이트 사용은 중지됨)
      g_pd3dDevice->SetRenderState( D3DRS_LIGHTING, TRUE );
      // 최종적으로 엠비언트 라이트 켜기 (환경광의 양을 결정)
     g_pd3dDevice->SetRenderState( D3DRS_AMBIENT, 0x00808080 );
}
 

•조명을 위한 버텍스 구조 
// 조명 처리를 위한 버텍스 구조체
    struct LIGHTVERTEX {
       D3DXVECTOR3 position;    // 3D 좌표 구조체
       D3DXVECTOR3 normal;     // 버텍스 노말
    };
   // 버텍스 구조를 지정하는 FVF 정의
   #define D3DFVF_LIGHTVERTEX   (D3DFVF_XYZ|D3DFVF_NORMAL)


•InitGeometryLight() 함수 
HRESULT InitGeometryLight()
{
    // 버텍스 버퍼를 생성한다.
    if( FAILED( g_pd3dDevice->CreateVertexBuffer( 6*sizeof(LIGHTVERTEX),
                                                  0, D3DFVF_LIGHTVERTEX,
                                                  D3DPOOL_DEFAULT, &g_pVBLight, NULL ) ) ) {
        return E_FAIL;
    }

    // 버텍스 버퍼에 락을 건 후 버텍스를 넣는다.
    LIGHTVERTEX* pVertices;
    if( FAILED( g_pVBLight->Lock( 0, 0, (void**)&pVertices, 0 ) ) )  return E_FAIL;

  // 삼각형 1
  pVertices[0].position = D3DXVECTOR3(-30.0f,  0.0f, -30.0f);
  pVertices[1].position = D3DXVECTOR3(-60.0f, 30.0f,   0.0f);
  pVertices[2].position = D3DXVECTOR3(-90.0f,  0.0f,  30.0f); 
// 삼각형1에 대한 노말 구하기
  D3DXVECTOR3 p1 = pVertices[1].position - pVertices[0].position;
  D3DXVECTOR3 p2 = pVertices[2].position - pVertices[0].position;
  D3DXVECTOR3 pNormal;
  D3DXVec3Cross(&pNormal, &p2, &p1); 
  // 삼각형1의 각 버텍스에 노말 값 할당
  pVertices[0].normal = pNormal;
  pVertices[1].normal = pNormal;
  pVertices[2].normal = pNormal; 

      // 삼각형 2
  pVertices[3].position = D3DXVECTOR3(90.0f,  0.0f,  30.0f);
  pVertices[4].position = D3DXVECTOR3(60.0f, 30.0f,   0.0f);
  pVertices[5].position = D3DXVECTOR3(30.0f,  0.0f, -30.0f);
  // 삼각형2에 대한 노말 구하기
  p1 = pVertices[4].position - pVertices[3].position;
  p2 = pVertices[5].position - pVertices[3].position;
  //pNormal;
  D3DXVec3Cross(&pNormal, &p2, &p1);
  // 삼각형2의 각 버텍스에 노말 값 할당
  pVertices[3].normal = pNormal;
  pVertices[4].normal = pNormal;
  pVertices[5].normal = pNormal;
    g_pVBLight->Unlock();

    return S_OK;
}

 
Render() 함수
VOID Render()
{
	...

    // 라이트 설정
    SetupLight(); 

    // 재질 설정
     D3DMATERIAL9 mtrl;    // 재질 설정용 구조체
     ZeroMemory( &mtrl, sizeof(D3DMATERIAL9) );

     // 확산광과 주변광 재질에 대하여 r, g, b, a 값을 설정
     mtrl.Diffuse.r = mtrl.Ambient.r = 1.0f;   // 노란색
     mtrl.Diffuse.g = mtrl.Ambient.g = 1.0f;   // 노란색
     mtrl.Diffuse.b = mtrl.Ambient.b = 0.0f;
     mtrl.Diffuse.a = mtrl.Ambient.a = 1.0f;

     // 설정한 재질을 적용
     g_pd3dDevice->SetMaterial( &mtrl ); 

   // 삼각형 출력을 위한 이동
  D3DXMatrixTranslation(&matWorld, 0, 0, -100);       // 앞쪽(-z방향)으로 이동
          g_pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld );  // 변환 매트릭스 전달 

         // 삼각형 출력을 위한 버텍스 버퍼 지정
        g_pd3dDevice->SetStreamSource( 0, g_pVBLight, 0, sizeof(LIGHTVERTEX) );
        g_pd3dDevice->SetFVF( D3DFVF_LIGHTVERTEX );                // 버텍스 포맷 지정
        g_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, 2 );   // 삼각형 2개 그리기   

        // 화면 그리기 끝
        g_pd3dDevice->EndScene(); 
       }

    // 백버퍼의 내용을 화면으로 보낸다.
    g_pd3dDevice->Present( NULL, NULL, NULL, NULL );
}